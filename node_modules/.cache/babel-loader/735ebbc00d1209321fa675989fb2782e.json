{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gilpr\\\\redux--material-ui--crud\\\\src\\\\components\\\\SnackBar.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from 'clsx';\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport InfoIcon from '@material-ui/icons/Info';\nimport { green, amber } from \"@material-ui/core/colors\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\nimport { withStyles } from \"@material-ui/core/styles\";\nconst variantIcon = {\n  success: CheckCircleIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nconst styles1 = theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  }\n});\n\nfunction SnackbarContentWrapper(props) {\n  const {\n    classes,\n    className,\n    message,\n    onClose,\n    variant,\n    ...other\n  } = props;\n  const Icon = variantIcon[variant];\n  return /*#__PURE__*/React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      className: classes.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }), message),\n    action: [/*#__PURE__*/React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: event => onClose(event, \"button\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }))]\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }));\n}\n\nSnackbarContentWrapper.propTypes = {\n  classes: PropTypes.shape({\n    success: PropTypes.string,\n    error: PropTypes.string,\n    icon: PropTypes.string,\n    iconVariant: PropTypes.string,\n    message: PropTypes.string\n  }).isRequired,\n  message: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.string.isRequired\n};\nconst MySnackbarContentWrapper = withStyles(styles1)(SnackbarContentWrapper);\n\nconst CustomizedSnackbar = ({\n  open,\n  handleClose,\n  variant,\n  message\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: open,\n    autoHideDuration: 6000,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    onClose: handleClose,\n    variant: variant,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  })));\n};\n\nCustomizedSnackbar.propTypes = {\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  variant: PropTypes.string.isRequired,\n  message: PropTypes.string.isRequired\n};\nexport default CustomizedSnackbar;","map":{"version":3,"sources":["C:/Users/gilpr/redux--material-ui--crud/src/components/SnackBar.js"],"names":["React","PropTypes","clsx","CheckCircleIcon","ErrorIcon","CloseIcon","InfoIcon","green","amber","IconButton","Snackbar","SnackbarContent","withStyles","variantIcon","success","error","info","styles1","theme","backgroundColor","palette","dark","primary","main","warning","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","SnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","close","event","propTypes","shape","string","isRequired","node","func","MySnackbarContentWrapper","CustomizedSnackbar","open","handleClose","vertical","horizontal","bool"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport clsx from 'clsx';\r\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\r\nimport ErrorIcon from \"@material-ui/icons/Error\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { green, amber } from \"@material-ui/core/colors\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport SnackbarContent from \"@material-ui/core/SnackbarContent\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst variantIcon = {\r\n  success: CheckCircleIcon,\r\n  error: ErrorIcon,\r\n  info: InfoIcon,\r\n};\r\n\r\nconst styles1 = theme => ({\r\n  success: {\r\n    backgroundColor: green[600],\r\n  },\r\n  error: {\r\n    backgroundColor: theme.palette.error.dark,\r\n  },\r\n  info: {\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n  warning: {\r\n    backgroundColor: amber[700],\r\n  },\r\n  icon: {\r\n    fontSize: 20,\r\n  },\r\n  iconVariant: {\r\n    opacity: 0.9,\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  message: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n});\r\n\r\nfunction SnackbarContentWrapper(props) {\r\n  const { classes, className, message, onClose, variant, ...other } = props;\r\n  const Icon = variantIcon[variant];\r\n\r\n  return (\r\n    <SnackbarContent\r\n      className={clsx(classes[variant], className)}\r\n      aria-describedby=\"client-snackbar\"\r\n      message={\r\n        <span className={classes.message}>\r\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n          {message}\r\n        </span>\r\n      }\r\n      action={[\r\n        <IconButton\r\n          key=\"close\"\r\n          aria-label=\"Close\"\r\n          color=\"inherit\"\r\n          className={classes.close}\r\n          onClick={event => onClose(event, \"button\")}\r\n        >\r\n          <CloseIcon className={classes.icon} />\r\n        </IconButton>\r\n      ]}\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\nSnackbarContentWrapper.propTypes = {\r\n  classes: PropTypes.shape({\r\n    success: PropTypes.string,\r\n    error: PropTypes.string,\r\n    icon: PropTypes.string,\r\n    iconVariant: PropTypes.string,\r\n    message: PropTypes.string\r\n  }).isRequired,\r\n  message: PropTypes.node.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  variant: PropTypes.string.isRequired\r\n};\r\n\r\nconst MySnackbarContentWrapper = withStyles(styles1)(SnackbarContentWrapper);\r\n\r\nconst CustomizedSnackbar = ({ open, handleClose, variant, message }) => {\r\n  return (\r\n    <div>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"left\"\r\n        }}\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n      >\r\n        <MySnackbarContentWrapper\r\n          onClose={handleClose}\r\n          variant={variant}\r\n          message={message}\r\n        />\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomizedSnackbar.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  handleClose: PropTypes.func.isRequired,\r\n  variant: PropTypes.string.isRequired,\r\n  message: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CustomizedSnackbar;\r\n"]},"metadata":{},"sourceType":"module"}